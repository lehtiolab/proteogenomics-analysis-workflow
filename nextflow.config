params {
  container = 'lehtiolab/ipaw:0.5' // Container slug. Stable releases should specify release tag!

  outdir = './results'
  tracedir = "${params.outdir}/pipeline_info"
  awsqueue = false
  awsregion = 'eu-west-1'
  external_config_version = 'master'

  pisepdb = false
  isobaric = false
  activation = 'hcd'
  bamfiles = false
  mods = false
  knownheaders = false
  novheaders = false
  varheaders = false
  saavheader = false
  noclassfdr = false
  dbsnp = false
  cosmic = false
  mzmldef = false
  input = false
  normalpsms = false
  annovar_dir = false
  bigwigs = false
  splitchar = false
  quantlookup = false
  minlen = 8
  maxlen = 50
  maxmiscleav = 0

}

includeConfig 'conf/base.config'
profiles {

  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    docker.enabled = true
    docker.fixOwnership = true
    docker.runOptions = '-u $(id -u):$(id -g)'
    singularity.enabled = false
    conda.enabled = false
  }
  singularity {
    singularity.enabled = true
  }
  lehtio { 
    includeConfig "https://raw.githubusercontent.com/lehtiolab/static-resources/${params.external_config_version}/nf-configs/lehtio.config"
    includeConfig "https://raw.githubusercontent.com/lehtiolab/static-resources/${params.external_config_version}/nf-configs/${params.pisepdb ? 'ipaw_6ft': 'vardb'}.config"
  }
  uppmax { 
    includeConfig 'conf/uppmax.config'
  }
  testing {
    includeConfig 'conf/base.config'
  }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
